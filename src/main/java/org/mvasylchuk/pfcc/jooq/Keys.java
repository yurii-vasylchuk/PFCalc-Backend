/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.mvasylchuk.pfcc.jooq.tables.Dish;
import org.mvasylchuk.pfcc.jooq.tables.DishIngredients;
import org.mvasylchuk.pfcc.jooq.tables.Food;
import org.mvasylchuk.pfcc.jooq.tables.Ingredients;
import org.mvasylchuk.pfcc.jooq.tables.Meal;
import org.mvasylchuk.pfcc.jooq.tables.Measurement;
import org.mvasylchuk.pfcc.jooq.tables.Reports;
import org.mvasylchuk.pfcc.jooq.tables.SecurityTokens;
import org.mvasylchuk.pfcc.jooq.tables.Users;
import org.mvasylchuk.pfcc.jooq.tables.records.DishIngredientsRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.DishRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.FoodRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.IngredientsRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.MealRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.MeasurementRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.ReportsRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.SecurityTokensRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * pfcc.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DishRecord> KEY_DISH_PRIMARY = Internal.createUniqueKey(Dish.DISH, DSL.name("KEY_dish_PRIMARY"), new TableField[] { Dish.DISH.ID }, true);
    public static final UniqueKey<DishIngredientsRecord> KEY_DISH_INGREDIENTS_PRIMARY = Internal.createUniqueKey(DishIngredients.DISH_INGREDIENTS, DSL.name("KEY_dish_ingredients_PRIMARY"), new TableField[] { DishIngredients.DISH_INGREDIENTS.DISH_ID, DishIngredients.DISH_INGREDIENTS.INGREDIENT_ID }, true);
    public static final UniqueKey<FoodRecord> KEY_FOOD_PRIMARY = Internal.createUniqueKey(Food.FOOD, DSL.name("KEY_food_PRIMARY"), new TableField[] { Food.FOOD.ID }, true);
    public static final UniqueKey<IngredientsRecord> KEY_INGREDIENTS_PRIMARY = Internal.createUniqueKey(Ingredients.INGREDIENTS, DSL.name("KEY_ingredients_PRIMARY"), new TableField[] { Ingredients.INGREDIENTS.RECIPE_ID, Ingredients.INGREDIENTS.INGREDIENT_ID }, true);
    public static final UniqueKey<MealRecord> KEY_MEAL_PRIMARY = Internal.createUniqueKey(Meal.MEAL, DSL.name("KEY_meal_PRIMARY"), new TableField[] { Meal.MEAL.ID }, true);
    public static final UniqueKey<MeasurementRecord> KEY_MEASUREMENT_PRIMARY = Internal.createUniqueKey(Measurement.MEASUREMENT, DSL.name("KEY_measurement_PRIMARY"), new TableField[] { Measurement.MEASUREMENT.ID }, true);
    public static final UniqueKey<ReportsRecord> KEY_REPORTS_FILE_PATH = Internal.createUniqueKey(Reports.REPORTS, DSL.name("KEY_reports_file_path"), new TableField[] { Reports.REPORTS.FILE_PATH }, true);
    public static final UniqueKey<ReportsRecord> KEY_REPORTS_NAME = Internal.createUniqueKey(Reports.REPORTS, DSL.name("KEY_reports_name"), new TableField[] { Reports.REPORTS.NAME }, true);
    public static final UniqueKey<ReportsRecord> KEY_REPORTS_PRIMARY = Internal.createUniqueKey(Reports.REPORTS, DSL.name("KEY_reports_PRIMARY"), new TableField[] { Reports.REPORTS.ID }, true);
    public static final UniqueKey<SecurityTokensRecord> KEY_SECURITY_TOKENS_CODE = Internal.createUniqueKey(SecurityTokens.SECURITY_TOKENS, DSL.name("KEY_security_tokens_code"), new TableField[] { SecurityTokens.SECURITY_TOKENS.CODE }, true);
    public static final UniqueKey<SecurityTokensRecord> KEY_SECURITY_TOKENS_PRIMARY = Internal.createUniqueKey(SecurityTokens.SECURITY_TOKENS, DSL.name("KEY_security_tokens_PRIMARY"), new TableField[] { SecurityTokens.SECURITY_TOKENS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_email"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DishRecord, FoodRecord> DISH_IBFK_1 = Internal.createForeignKey(Dish.DISH, DSL.name("dish_ibfk_1"), new TableField[] { Dish.DISH.FOOD_ID }, Keys.KEY_FOOD_PRIMARY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<DishRecord, UsersRecord> DISH_IBFK_2 = Internal.createForeignKey(Dish.DISH, DSL.name("dish_ibfk_2"), new TableField[] { Dish.DISH.OWNER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<DishIngredientsRecord, DishRecord> DISH_INGREDIENTS_IBFK_1 = Internal.createForeignKey(DishIngredients.DISH_INGREDIENTS, DSL.name("dish_ingredients_ibfk_1"), new TableField[] { DishIngredients.DISH_INGREDIENTS.DISH_ID }, Keys.KEY_DISH_PRIMARY, new TableField[] { Dish.DISH.ID }, true);
    public static final ForeignKey<DishIngredientsRecord, DishRecord> DISH_INGREDIENTS_IBFK_2 = Internal.createForeignKey(DishIngredients.DISH_INGREDIENTS, DSL.name("dish_ingredients_ibfk_2"), new TableField[] { DishIngredients.DISH_INGREDIENTS.DISH_ID }, Keys.KEY_DISH_PRIMARY, new TableField[] { Dish.DISH.ID }, true);
    public static final ForeignKey<FoodRecord, UsersRecord> FOOD_IBFK_1 = Internal.createForeignKey(Food.FOOD, DSL.name("food_ibfk_1"), new TableField[] { Food.FOOD.OWNER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<IngredientsRecord, FoodRecord> INGREDIENTS_IBFK_1 = Internal.createForeignKey(Ingredients.INGREDIENTS, DSL.name("ingredients_ibfk_1"), new TableField[] { Ingredients.INGREDIENTS.RECIPE_ID }, Keys.KEY_FOOD_PRIMARY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<IngredientsRecord, FoodRecord> INGREDIENTS_IBFK_2 = Internal.createForeignKey(Ingredients.INGREDIENTS, DSL.name("ingredients_ibfk_2"), new TableField[] { Ingredients.INGREDIENTS.INGREDIENT_ID }, Keys.KEY_FOOD_PRIMARY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<MealRecord, FoodRecord> MEAL_IBFK_1 = Internal.createForeignKey(Meal.MEAL, DSL.name("meal_ibfk_1"), new TableField[] { Meal.MEAL.FOOD_ID }, Keys.KEY_FOOD_PRIMARY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<MealRecord, DishRecord> MEAL_IBFK_2 = Internal.createForeignKey(Meal.MEAL, DSL.name("meal_ibfk_2"), new TableField[] { Meal.MEAL.DISH_ID }, Keys.KEY_DISH_PRIMARY, new TableField[] { Dish.DISH.ID }, true);
    public static final ForeignKey<MealRecord, UsersRecord> MEAL_IBFK_3 = Internal.createForeignKey(Meal.MEAL, DSL.name("meal_ibfk_3"), new TableField[] { Meal.MEAL.OWNER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<MeasurementRecord, FoodRecord> MEASUREMENT_IBFK_1 = Internal.createForeignKey(Measurement.MEASUREMENT, DSL.name("measurement_ibfk_1"), new TableField[] { Measurement.MEASUREMENT.FOOD_ID }, Keys.KEY_FOOD_PRIMARY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<ReportsRecord, UsersRecord> REPORTS_IBFK_1 = Internal.createForeignKey(Reports.REPORTS, DSL.name("reports_ibfk_1"), new TableField[] { Reports.REPORTS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<SecurityTokensRecord, UsersRecord> SECURITY_TOKENS_IBFK_1 = Internal.createForeignKey(SecurityTokens.SECURITY_TOKENS, DSL.name("security_tokens_ibfk_1"), new TableField[] { SecurityTokens.SECURITY_TOKENS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
}
