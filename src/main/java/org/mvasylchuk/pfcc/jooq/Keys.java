/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.mvasylchuk.pfcc.jooq.tables.Food;
import org.mvasylchuk.pfcc.jooq.tables.FoodIngredients;
import org.mvasylchuk.pfcc.jooq.tables.Meal;
import org.mvasylchuk.pfcc.jooq.tables.Measurement;
import org.mvasylchuk.pfcc.jooq.tables.Reports;
import org.mvasylchuk.pfcc.jooq.tables.SecurityTokens;
import org.mvasylchuk.pfcc.jooq.tables.Users;
import org.mvasylchuk.pfcc.jooq.tables.records.FoodIngredientsRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.FoodRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.MealRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.MeasurementRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.ReportsRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.SecurityTokensRecord;
import org.mvasylchuk.pfcc.jooq.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FoodRecord> FOOD_PKEY = Internal.createUniqueKey(Food.FOOD, DSL.name("food_pkey"), new TableField[] { Food.FOOD.ID }, true);
    public static final UniqueKey<FoodIngredientsRecord> INGREDIENTS_PKEY = Internal.createUniqueKey(FoodIngredients.FOOD_INGREDIENTS, DSL.name("ingredients_pkey"), new TableField[] { FoodIngredients.FOOD_INGREDIENTS.RECIPE_ID, FoodIngredients.FOOD_INGREDIENTS.INGREDIENT_ID }, true);
    public static final UniqueKey<MealRecord> MEAL_PKEY = Internal.createUniqueKey(Meal.MEAL, DSL.name("meal_pkey"), new TableField[] { Meal.MEAL.ID }, true);
    public static final UniqueKey<MeasurementRecord> MEASUREMENT_PKEY = Internal.createUniqueKey(Measurement.MEASUREMENT, DSL.name("measurement_pkey"), new TableField[] { Measurement.MEASUREMENT.ID }, true);
    public static final UniqueKey<ReportsRecord> REPORTS_FILE_PATH_KEY = Internal.createUniqueKey(Reports.REPORTS, DSL.name("reports_file_path_key"), new TableField[] { Reports.REPORTS.FILE_PATH }, true);
    public static final UniqueKey<ReportsRecord> REPORTS_NAME_KEY = Internal.createUniqueKey(Reports.REPORTS, DSL.name("reports_name_key"), new TableField[] { Reports.REPORTS.NAME }, true);
    public static final UniqueKey<ReportsRecord> REPORTS_PKEY = Internal.createUniqueKey(Reports.REPORTS, DSL.name("reports_pkey"), new TableField[] { Reports.REPORTS.ID }, true);
    public static final UniqueKey<SecurityTokensRecord> SECURITY_TOKENS_CODE_KEY = Internal.createUniqueKey(SecurityTokens.SECURITY_TOKENS, DSL.name("security_tokens_code_key"), new TableField[] { SecurityTokens.SECURITY_TOKENS.CODE }, true);
    public static final UniqueKey<SecurityTokensRecord> SECURITY_TOKENS_PKEY = Internal.createUniqueKey(SecurityTokens.SECURITY_TOKENS, DSL.name("security_tokens_pkey"), new TableField[] { SecurityTokens.SECURITY_TOKENS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FoodRecord, UsersRecord> FOOD__FOOD_OWNER_ID_FKEY = Internal.createForeignKey(Food.FOOD, DSL.name("food_owner_id_fkey"), new TableField[] { Food.FOOD.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<FoodIngredientsRecord, FoodRecord> FOOD_INGREDIENTS__INGREDIENTS_INGREDIENT_ID_FKEY = Internal.createForeignKey(FoodIngredients.FOOD_INGREDIENTS, DSL.name("ingredients_ingredient_id_fkey"), new TableField[] { FoodIngredients.FOOD_INGREDIENTS.INGREDIENT_ID }, Keys.FOOD_PKEY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<FoodIngredientsRecord, FoodRecord> FOOD_INGREDIENTS__INGREDIENTS_RECIPE_ID_FKEY = Internal.createForeignKey(FoodIngredients.FOOD_INGREDIENTS, DSL.name("ingredients_recipe_id_fkey"), new TableField[] { FoodIngredients.FOOD_INGREDIENTS.RECIPE_ID }, Keys.FOOD_PKEY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<MealRecord, FoodRecord> MEAL__MEAL_FOOD_ID_FKEY = Internal.createForeignKey(Meal.MEAL, DSL.name("meal_food_id_fkey"), new TableField[] { Meal.MEAL.FOOD_ID }, Keys.FOOD_PKEY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<MealRecord, UsersRecord> MEAL__MEAL_OWNER_ID_FKEY = Internal.createForeignKey(Meal.MEAL, DSL.name("meal_owner_id_fkey"), new TableField[] { Meal.MEAL.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<MeasurementRecord, FoodRecord> MEASUREMENT__MEASUREMENT_FOOD_ID_FKEY = Internal.createForeignKey(Measurement.MEASUREMENT, DSL.name("measurement_food_id_fkey"), new TableField[] { Measurement.MEASUREMENT.FOOD_ID }, Keys.FOOD_PKEY, new TableField[] { Food.FOOD.ID }, true);
    public static final ForeignKey<ReportsRecord, UsersRecord> REPORTS__REPORTS_USER_ID_FKEY = Internal.createForeignKey(Reports.REPORTS, DSL.name("reports_user_id_fkey"), new TableField[] { Reports.REPORTS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<SecurityTokensRecord, UsersRecord> SECURITY_TOKENS__SECURITY_TOKENS_USER_ID_FKEY = Internal.createForeignKey(SecurityTokens.SECURITY_TOKENS, DSL.name("security_tokens_user_id_fkey"), new TableField[] { SecurityTokens.SECURITY_TOKENS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
