/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvasylchuk.pfcc.jooq.Indexes;
import org.mvasylchuk.pfcc.jooq.Keys;
import org.mvasylchuk.pfcc.jooq.Pfcc;
import org.mvasylchuk.pfcc.jooq.tables.records.SecurityTokensRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityTokens extends TableImpl<SecurityTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pfcc.security_tokens</code>
     */
    public static final SecurityTokens SECURITY_TOKENS = new SecurityTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityTokensRecord> getRecordType() {
        return SecurityTokensRecord.class;
    }

    /**
     * The column <code>pfcc.security_tokens.id</code>.
     */
    public final TableField<SecurityTokensRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval(`pfcc`.`security_token_id_seq`)"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>pfcc.security_tokens.code</code>.
     */
    public final TableField<SecurityTokensRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pfcc.security_tokens.user_id</code>.
     */
    public final TableField<SecurityTokensRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>pfcc.security_tokens.type</code>.
     */
    public final TableField<SecurityTokensRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>pfcc.security_tokens.is_active</code>.
     */
    public final TableField<SecurityTokensRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>pfcc.security_tokens.valid_until</code>.
     */
    public final TableField<SecurityTokensRecord, LocalDateTime> VALID_UNTIL = createField(DSL.name("valid_until"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>pfcc.security_tokens.created_at</code>.
     */
    public final TableField<SecurityTokensRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>pfcc.security_tokens.modified_at</code>.
     */
    public final TableField<SecurityTokensRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private SecurityTokens(Name alias, Table<SecurityTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityTokens(Name alias, Table<SecurityTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pfcc.security_tokens</code> table reference
     */
    public SecurityTokens(String alias) {
        this(DSL.name(alias), SECURITY_TOKENS);
    }

    /**
     * Create an aliased <code>pfcc.security_tokens</code> table reference
     */
    public SecurityTokens(Name alias) {
        this(alias, SECURITY_TOKENS);
    }

    /**
     * Create a <code>pfcc.security_tokens</code> table reference
     */
    public SecurityTokens() {
        this(DSL.name("security_tokens"), null);
    }

    public <O extends Record> SecurityTokens(Table<O> child, ForeignKey<O, SecurityTokensRecord> key) {
        super(child, key, SECURITY_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pfcc.PFCC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SECURITY_TOKENS_USER_ID);
    }

    @Override
    public UniqueKey<SecurityTokensRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_TOKENS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityTokensRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_TOKENS_CODE);
    }

    @Override
    public List<ForeignKey<SecurityTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SECURITY_TOKENS_IBFK_1);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>pfcc.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SECURITY_TOKENS_IBFK_1);

        return _users;
    }

    @Override
    public SecurityTokens as(String alias) {
        return new SecurityTokens(DSL.name(alias), this);
    }

    @Override
    public SecurityTokens as(Name alias) {
        return new SecurityTokens(alias, this);
    }

    @Override
    public SecurityTokens as(Table<?> alias) {
        return new SecurityTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityTokens rename(String name) {
        return new SecurityTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityTokens rename(Name name) {
        return new SecurityTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityTokens rename(Table<?> name) {
        return new SecurityTokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Long, String, Byte, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super String, ? super Long, ? super String, ? super Byte, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super String, ? super Long, ? super String, ? super Byte, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
