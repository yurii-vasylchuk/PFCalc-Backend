/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvasylchuk.pfcc.jooq.Keys;
import org.mvasylchuk.pfcc.jooq.Public;
import org.mvasylchuk.pfcc.jooq.tables.records.IngredientsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ingredients extends TableImpl<IngredientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ingredients</code>
     */
    public static final Ingredients INGREDIENTS = new Ingredients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngredientsRecord> getRecordType() {
        return IngredientsRecord.class;
    }

    /**
     * The column <code>public.ingredients.recipe_id</code>.
     */
    public final TableField<IngredientsRecord, Long> RECIPE_ID = createField(DSL.name("recipe_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ingredients.ingredient_id</code>.
     */
    public final TableField<IngredientsRecord, Long> INGREDIENT_ID = createField(DSL.name("ingredient_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ingredients.ingredient_weight</code>.
     */
    public final TableField<IngredientsRecord, BigDecimal> INGREDIENT_WEIGHT = createField(DSL.name("ingredient_weight"), SQLDataType.NUMERIC(9, 4).nullable(false), this, "");

    /**
     * The column <code>public.ingredients.ingredient_index</code>.
     */
    public final TableField<IngredientsRecord, Long> INGREDIENT_INDEX = createField(DSL.name("ingredient_index"), SQLDataType.BIGINT.nullable(false), this, "");

    private Ingredients(Name alias, Table<IngredientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ingredients(Name alias, Table<IngredientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ingredients</code> table reference
     */
    public Ingredients(String alias) {
        this(DSL.name(alias), INGREDIENTS);
    }

    /**
     * Create an aliased <code>public.ingredients</code> table reference
     */
    public Ingredients(Name alias) {
        this(alias, INGREDIENTS);
    }

    /**
     * Create a <code>public.ingredients</code> table reference
     */
    public Ingredients() {
        this(DSL.name("ingredients"), null);
    }

    public <O extends Record> Ingredients(Table<O> child, ForeignKey<O, IngredientsRecord> key) {
        super(child, key, INGREDIENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IngredientsRecord> getPrimaryKey() {
        return Keys.INGREDIENTS_PKEY;
    }

    @Override
    public List<ForeignKey<IngredientsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INGREDIENTS__INGREDIENTS_RECIPE_ID_FKEY, Keys.INGREDIENTS__INGREDIENTS_INGREDIENT_ID_FKEY);
    }

    private transient Food _ingredientsRecipeIdFkey;
    private transient Food _ingredientsIngredientIdFkey;

    /**
     * Get the implicit join path to the <code>public.food</code> table, via the
     * <code>ingredients_recipe_id_fkey</code> key.
     */
    public Food ingredientsRecipeIdFkey() {
        if (_ingredientsRecipeIdFkey == null)
            _ingredientsRecipeIdFkey = new Food(this, Keys.INGREDIENTS__INGREDIENTS_RECIPE_ID_FKEY);

        return _ingredientsRecipeIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.food</code> table, via the
     * <code>ingredients_ingredient_id_fkey</code> key.
     */
    public Food ingredientsIngredientIdFkey() {
        if (_ingredientsIngredientIdFkey == null)
            _ingredientsIngredientIdFkey = new Food(this, Keys.INGREDIENTS__INGREDIENTS_INGREDIENT_ID_FKEY);

        return _ingredientsIngredientIdFkey;
    }

    @Override
    public Ingredients as(String alias) {
        return new Ingredients(DSL.name(alias), this);
    }

    @Override
    public Ingredients as(Name alias) {
        return new Ingredients(alias, this);
    }

    @Override
    public Ingredients as(Table<?> alias) {
        return new Ingredients(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(String name) {
        return new Ingredients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(Name name) {
        return new Ingredients(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ingredients rename(Table<?> name) {
        return new Ingredients(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, BigDecimal, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super BigDecimal, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super BigDecimal, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
