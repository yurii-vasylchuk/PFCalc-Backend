/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvasylchuk.pfcc.jooq.Keys;
import org.mvasylchuk.pfcc.jooq.Public;
import org.mvasylchuk.pfcc.jooq.tables.records.MeasurementRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurement extends TableImpl<MeasurementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.measurement</code>
     */
    public static final Measurement MEASUREMENT = new Measurement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurementRecord> getRecordType() {
        return MeasurementRecord.class;
    }

    /**
     * The column <code>public.measurement.id</code>.
     */
    public final TableField<MeasurementRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.measurement.food_id</code>.
     */
    public final TableField<MeasurementRecord, Long> FOOD_ID = createField(DSL.name("food_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.measurement.to_gram_multiplier</code>.
     */
    public final TableField<MeasurementRecord, BigDecimal> TO_GRAM_MULTIPLIER = createField(DSL.name("to_gram_multiplier"), SQLDataType.NUMERIC(9, 4).nullable(false), this, "");

    /**
     * The column <code>public.measurement.name</code>.
     */
    public final TableField<MeasurementRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.measurement.default_value</code>.
     */
    public final TableField<MeasurementRecord, BigDecimal> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.NUMERIC(9, 4).nullable(false), this, "");

    private Measurement(Name alias, Table<MeasurementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measurement(Name alias, Table<MeasurementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.measurement</code> table reference
     */
    public Measurement(String alias) {
        this(DSL.name(alias), MEASUREMENT);
    }

    /**
     * Create an aliased <code>public.measurement</code> table reference
     */
    public Measurement(Name alias) {
        this(alias, MEASUREMENT);
    }

    /**
     * Create a <code>public.measurement</code> table reference
     */
    public Measurement() {
        this(DSL.name("measurement"), null);
    }

    public <O extends Record> Measurement(Table<O> child, ForeignKey<O, MeasurementRecord> key) {
        super(child, key, MEASUREMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MeasurementRecord, Long> getIdentity() {
        return (Identity<MeasurementRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeasurementRecord> getPrimaryKey() {
        return Keys.MEASUREMENT_PKEY;
    }

    @Override
    public List<ForeignKey<MeasurementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MEASUREMENT__MEASUREMENT_FOOD_ID_FKEY);
    }

    private transient Food _food;

    /**
     * Get the implicit join path to the <code>public.food</code> table.
     */
    public Food food() {
        if (_food == null)
            _food = new Food(this, Keys.MEASUREMENT__MEASUREMENT_FOOD_ID_FKEY);

        return _food;
    }

    @Override
    public Measurement as(String alias) {
        return new Measurement(DSL.name(alias), this);
    }

    @Override
    public Measurement as(Name alias) {
        return new Measurement(alias, this);
    }

    @Override
    public Measurement as(Table<?> alias) {
        return new Measurement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(String name) {
        return new Measurement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Name name) {
        return new Measurement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Table<?> name) {
        return new Measurement(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, BigDecimal, String, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super BigDecimal, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super BigDecimal, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
